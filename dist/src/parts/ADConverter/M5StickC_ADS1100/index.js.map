{"version":3,"sources":["../src/parts/ADConverter/M5StickC_ADS1100/index.ts"],"names":[],"mappings":";;AAYA,MAAqB,gBAAgB;IAmBjC;QACI,IAAI,CAAC,IAAI,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;QACzC,IAAI,CAAC,YAAY,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QACnC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,IAAI,CAAC,iBAAiB,GAAG,GAAG,CAAC;QAC7B,IAAI,CAAC,WAAW,GAAG;YACf,OAAO,EAAM,IAAI;YACjB,WAAW,EAAE,IAAI;YACjB,SAAS,EAAI,IAAI;YACjB,OAAO,EAAM,IAAI;YACjB,UAAU,EAAG,IAAI;YAEjB,SAAS,EAAI,IAAI;YACjB,WAAW,EAAE,IAAI;YACjB,WAAW,EAAE,IAAI;YAEjB,OAAO,EAAM,IAAI;YACjB,SAAS,EAAI,IAAI;YACjB,QAAQ,EAAK,IAAI;YACjB,QAAQ,EAAK,IAAI;YACjB,OAAO,EAAM,IAAI;YAEjB,QAAQ,EAAK,IAAI;YACjB,KAAK,EAAQ,IAAI;YACjB,KAAK,EAAQ,IAAI;YACjB,KAAK,EAAQ,IAAI;YACjB,KAAK,EAAQ,IAAI;SACpB,CAAC;QACF,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;IACvB,CAAC;IA9CM,MAAM,CAAC,IAAI;QACd,OAAO;YACH,IAAI,EAAE,kBAAkB;SAC3B,CAAC;IACN,CAAC;IA4CM,KAAK,CAAC,KAAY;QACrB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACvB,CAAC;IAEO,YAAY;QAChB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QACnB,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC;QAC1C,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC;QAC5C,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC;QACxC,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;IAC1C,CAAC;CACJ;AA7DD,mCA6DC","file":"index.js","sourcesContent":["import Obniz from \"../../../obniz\";\nimport PeripheralI2C from \"../../../obniz/libs/io_peripherals/i2c\";\n\nimport ObnizPartsInterface, {ObnizPartsInfo} from \"../../../obniz/ObnizPartsInterface\";\n\nexport interface M5StickC_ADS1100Options {\n    vcc?: number;\n    gnd?: number;\n    sda: number;\n    scl: number;\n}\n\nexport default class M5StickC_ADS1100 implements ObnizPartsInterface {\n\n    public static info(): ObnizPartsInfo {\n        return {\n            name: \"M5StickC_ADS1100\",\n        };\n    }\n\n    public keys: string[];\n    public requiredKeys: string[];\n    public params: any;\n\n    public address: number;\n    public conversationDelay: number;\n    public config_regs: any;\n    public config: any;\n\n    protected obniz!: Obniz;\n\n    constructor() {\n        this.keys = [\"vcc\", \"gnd\", \"sda\", \"scl\"];\n        this.requiredKeys = [\"sda\", \"scl\"];\n        this.address = 0x48;\n        this.conversationDelay = 100;\n        this.config_regs = {\n            OS_MASK:     0x80,   // Conversion\n            OS_NOEFFECT: 0x00,   // Write: Bit = 0 No effect\n            OS_SINGLE:   0x80,   // Write: Bit = 1 Begin a conversion (default)\n            OS_BUSY:     0x00,   // Read: Bit = 0 Device is not performing a conversion\n            OS_NOTBUSY:  0x80,   // Read: Bit = 1 Device is busy performing a conversion\n\n            MODE_MASK:   0x10,   // Device operating mode\n            MODE_CONTIN: 0x00,   // Continuous conversion mode (default)\n            MODE_SINGLE: 0x10,   // Single-conversion mode\n\n            DR_MASK:     0x0C,   // Data rate\n            DR_128SPS:   0x00,   // 128 samples per second\n            DR_32SPS:    0x04,   // 32 samples per second\n            DR_16SPS:    0x08,   // 16 samples per second\n            DR_8SPS:     0x0C,   // 8 samples per second (default)\n\n            PGA_MASK:    0x03,   // Programmable gain amplifier configuration\n            PGA_1:       0x00,   // Gain 1 (default)\n            PGA_2:       0x01,   // Gain 2\n            PGA_4:       0x02,   // Gain 4\n            PGA_8:       0x03,   // Gain 8\n        };\n        this.config = 0x00;\n    }\n\n    public wired(obniz: Obniz) {\n        this.obniz = obniz;\n    }\n\n    private updateConfig() {\n        this.config = 0x00;\n        this.config |= this.config_regs.OS_SINGLE;\n        this.config |= this.config_regs.MODE_CONTIN;\n        this.config |= this.config_regs.DR_8SPS;\n        this.config |= this.config_regs.PGA_1;\n    }\n}\n"]}